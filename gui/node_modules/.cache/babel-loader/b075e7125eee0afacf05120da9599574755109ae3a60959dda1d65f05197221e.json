{"ast":null,"code":"import { apiClient } from '../utils/ApiClient';\nconst ENDPOINT_PREFIX = '/auth';\n\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} request - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\nexport const login = async request => {\n  try {\n    const response = await apiClient(`${ENDPOINT_PREFIX}/login`, {\n      method: 'POST',\n      body: request\n    });\n\n    //TODO: This does not belong to service. Move it to login tsx file. Change docs and return of the method.\n    localStorage.setItem('token', response.jwtString);\n  } catch (error) {\n    throw new Error('Login failed.');\n  }\n};\n\n/**\r\n * Registers a new user by sending a POST request with the provided registration details.\r\n * Upon successful registration, the function returns the server response containing\r\n * details about the registered user.\r\n *\r\n * @param {RegisterRequestDTO} request - The registration details (e.g., username, password, email).\r\n * @returns {Promise<RegisterResponseDTO>} - A Promise that resolves to the registration response containing user details.\r\n *\r\n * @throws {Error} - Throws an error if the registration fails. The error is logged to the console.\r\n */\nexport const register = async request => {\n  try {\n    const response = await apiClient(`${ENDPOINT_PREFIX}/register`, {\n      method: 'POST',\n      body: request\n    });\n    return response;\n  } catch (error) {\n    throw new Error('Registration failed.');\n  }\n};","map":{"version":3,"names":["apiClient","ENDPOINT_PREFIX","login","request","response","method","body","localStorage","setItem","jwtString","error","Error","register"],"sources":["D:/Projects/ChronoSync/services/chronosync-fe/src/services/AuthService.ts"],"sourcesContent":["import { LoginRequestDTO } from '../dtos/requests/auth/LoginRequestDTO';\r\nimport { RegisterRequestDTO } from '../dtos/requests/auth/RegisterRequestDTO';\r\nimport { RegisterResponseDTO } from '../dtos/responses/auth/RegisterResponseDTO';\r\nimport { apiClient } from '../utils/ApiClient';\r\n\r\nconst ENDPOINT_PREFIX = '/auth';\r\n\r\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} request - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\r\nexport const login = async (request: LoginRequestDTO): Promise<void> => {\r\n\ttry {\r\n\t\tconst response = await apiClient<{ jwtString: string }>(`${ENDPOINT_PREFIX}/login`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: request,\r\n\t\t});\r\n\r\n\t\t//TODO: This does not belong to service. Move it to login tsx file. Change docs and return of the method.\r\n\t\tlocalStorage.setItem('token', response.jwtString);\r\n\t} catch (error) {\r\n\t\tthrow new Error('Login failed.');\r\n\t}\r\n};\r\n\r\n/**\r\n * Registers a new user by sending a POST request with the provided registration details.\r\n * Upon successful registration, the function returns the server response containing\r\n * details about the registered user.\r\n *\r\n * @param {RegisterRequestDTO} request - The registration details (e.g., username, password, email).\r\n * @returns {Promise<RegisterResponseDTO>} - A Promise that resolves to the registration response containing user details.\r\n *\r\n * @throws {Error} - Throws an error if the registration fails. The error is logged to the console.\r\n */\r\nexport const register = async (request: RegisterRequestDTO): Promise<RegisterResponseDTO> => {\r\n\ttry {\r\n\t\tconst response = await apiClient<RegisterResponseDTO>(`${ENDPOINT_PREFIX}/register`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: request,\r\n\t\t});\r\n\r\n\t\treturn response;\r\n\t} catch (error) {\r\n\t\tthrow new Error('Registration failed.');\r\n\t}\r\n};\r\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,eAAe,GAAG,OAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAOC,OAAwB,IAAoB;EACvE,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAwB,GAAGC,eAAe,QAAQ,EAAE;MACnFI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH;IACP,CAAC,CAAC;;IAEF;IACAI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,SAAS,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACjC;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOT,OAA2B,IAAmC;EAC5F,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAsB,GAAGC,eAAe,WAAW,EAAE;MACpFI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH;IACP,CAAC,CAAC;IAEF,OAAOC,QAAQ;EAChB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACxC;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}