{"ast":null,"code":"// import { apiClient } from '../utils/ApiClient';\n\nimport { apiClient } from '../utils/ApiClient';\nconst ENDPOINT_PREFIX = '/auth';\n\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} credentials - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\nexport const login = async credentials => {\n  try {\n    const response = await apiClient(`${ENDPOINT_PREFIX}/login`, {\n      method: 'POST',\n      body: credentials\n    });\n\n    //TODO: This does not belong to service. Move it to login tsx file.\n    localStorage.setItem('token', response.token);\n  } catch (error) {\n    throw new Error('Login failed');\n  }\n};\nexport const register = async credentials => {\n  try {\n    const response = await apiClient(`${ENDPOINT_PREFIX}/login`, {\n      method: 'POST',\n      body: credentials\n    });\n    localStorage.setItem('authToken', response.token);\n    console.log('Login successful, token stored.');\n  } catch (error) {\n    console.error('Login failed', error);\n    throw new Error('Login failed');\n  }\n};","map":{"version":3,"names":["apiClient","ENDPOINT_PREFIX","login","credentials","response","method","body","localStorage","setItem","token","error","Error","register","console","log"],"sources":["D:/Projects/ChronoSync/services/chronosync-fe/src/services/AuthService.ts"],"sourcesContent":["// import { apiClient } from '../utils/ApiClient';\r\nimport { LoginRequestDTO } from '../dtos/requests/auth/LoginRequestDTO';\r\nimport { apiClient } from '../utils/ApiClient';\r\n\r\nconst ENDPOINT_PREFIX = '/auth';\r\n\r\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} credentials - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\r\nexport const login = async (credentials: LoginRequestDTO): Promise<void> => {\r\n\ttry {\r\n\t\tconst response = await apiClient<{ token: string }>(`${ENDPOINT_PREFIX}/login`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: credentials,\r\n\t\t});\r\n\r\n\t\t//TODO: This does not belong to service. Move it to login tsx file.\r\n\t\tlocalStorage.setItem('token', response.token);\r\n\t} catch (error) {\r\n\t\tthrow new Error('Login failed');\r\n\t}\r\n};\r\n\r\nexport const register = async (credentials: LoginRequestDTO): Promise<void> => {\r\n\ttry {\r\n\t\tconst response = await apiClient<{ token: string }>(`${ENDPOINT_PREFIX}/login`, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: credentials,\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('authToken', response.token);\r\n\t\tconsole.log('Login successful, token stored.');\r\n\t} catch (error) {\r\n\t\tconsole.error('Login failed', error);\r\n\t\tthrow new Error('Login failed');\r\n\t}\r\n};\r\n"],"mappings":"AAAA;;AAEA,SAASA,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,eAAe,GAAG,OAAO;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAOC,WAA4B,IAAoB;EAC3E,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAoB,GAAGC,eAAe,QAAQ,EAAE;MAC/EI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH;IACP,CAAC,CAAC;;IAEF;IACAI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACK,KAAK,CAAC;EAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EAChC;AACD,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOT,WAA4B,IAAoB;EAC9E,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAoB,GAAGC,eAAe,QAAQ,EAAE;MAC/EI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH;IACP,CAAC,CAAC;IAEFI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEJ,QAAQ,CAACK,KAAK,CAAC;IACjDI,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAC/C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACfG,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EAChC;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}