{"ast":null,"code":"// import { apiClient } from '../utils/ApiClient';\n\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} credentials - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\nexport const login = async credentials => {\n  // try {\n  // \tconsole.log('triggered login');\n  // \tconsole.log('api client: ', apiClient);\n  // \tconst response = await apiClient<{ token: string }>('/login', {\n  // \t\tmethod: 'POST',\n  // \t\tbody: credentials,\n  // \t});\n  // \tlocalStorage.setItem('authToken', response.token);\n  // \tconsole.log('Login successful, token stored.');\n  // } catch (error) {\n  // \tconsole.error('Login failed', error);\n  // \tthrow new Error('Login failed');\n  // }\n};","map":{"version":3,"names":["login","credentials"],"sources":["D:/Projects/ChronoSync/services/chronosync-fe/src/services/AuthService.ts"],"sourcesContent":["// import { apiClient } from '../utils/ApiClient';\r\nimport { LoginRequestDTO } from '../dtos/LoginRequestDTO';\r\n\r\n/**\r\n * Logs in a user by sending a POST request with the provided credentials.\r\n * Upon successful authentication, the function stores the JWT token in the\r\n * localStorage to be used in subsequent authenticated requests.\r\n *\r\n * @param {LoginRequestDTO} credentials - The login credentials (username and password).\r\n * @returns {Promise<void>} - A Promise that resolves to `void`. The function doesn't return any value.\r\n *\r\n * @throws {Error} - Throws an error if the login fails. The error is logged to the console.\r\n */\r\nexport const login = async (credentials: LoginRequestDTO): Promise<void> => {\r\n\t// try {\r\n\t// \tconsole.log('triggered login');\r\n\t// \tconsole.log('api client: ', apiClient);\r\n\t// \tconst response = await apiClient<{ token: string }>('/login', {\r\n\t// \t\tmethod: 'POST',\r\n\t// \t\tbody: credentials,\r\n\t// \t});\r\n\t// \tlocalStorage.setItem('authToken', response.token);\r\n\t// \tconsole.log('Login successful, token stored.');\r\n\t// } catch (error) {\r\n\t// \tconsole.error('Login failed', error);\r\n\t// \tthrow new Error('Login failed');\r\n\t// }\r\n};\r\n"],"mappings":"AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,KAAK,GAAG,MAAOC,WAA4B,IAAoB;EAC3E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}